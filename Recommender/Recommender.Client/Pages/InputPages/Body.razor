@page "/body"
@using Recommender.Client.DTOs
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject NotificationService NotificationService
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<RadzenText TextStyle="TextStyle.H3">Body</RadzenText>
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="6">
        <RadzenStack>

            <RadzenFormField Text="Shoulder Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@ShoulderW" />
            </RadzenFormField>

            <RadzenFormField Text="Bust Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@BustW" />
            </RadzenFormField>

            <RadzenFormField Text="Waist Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@WaistW" />
            </RadzenFormField>

            <RadzenFormField Text="High Hip Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@HighHipW" />
            </RadzenFormField>

            <RadzenFormField Text="Hip Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@HipW" />
            </RadzenFormField>

            <RadzenButton Click=@(args => SaveChangesAsync()) Text="Save and Estimate" ButtonStyle="ButtonStyle.Primary" />

        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeSM="6">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H3">@ShortBodyEstimate</RadzenText>
            <RadzenText TextStyle="TextStyle.H4">Description:</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">@BodyEstimate</RadzenText>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>
<RadzenComponents />

@code {
    int ShoulderW = 0;
    int BustW = 0;
    int WaistW = 0;
    int HighHipW = 0;
    int HipW = 0;

    string BodyEstimate = "Not yet estimated";
    string ShortBodyEstimate = "Estimate";

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task<string> MakePrompt()
    {
        PromptDTO output = new PromptDTO($@"
Given the following body measurements:
- Shoulder Width: {ShoulderW} cm
- Bust Width: {BustW} cm
- Waist Width: {WaistW} cm
- High Hip Width: {HighHipW} cm
- Hip Width: {HipW} cm

Determine the body type and provide relevant style tips. The types are:
1. Hourglass: Well-defined waist, chest and hips approximately equal. Tips: Emphasize waist, dresses that cinch at the middle.
2. Bottom Hourglass: Like the hourglass but with slightly wider hips. Tips: Highlight lower body, structured tops, wide necklines.
3. Top Hourglass: Larger bust compared to hips, well-defined waist. Tips: V-neck tops, avoid adding volume to upper body.
4. Spoon (Pear): Hips significantly larger than bust, defined waist. Tips: Bold patterns on tops, solid darker colors for lower body.
5. Triangle: Hips wider than chest, less defined waist. Tips: Bright colors or embellishments on tops, A-line skirts.
6. Inverted Triangle: Broad chest, narrower hips. Tips: Patterned pants, full skirts to add volume below.
7. Rectangle: Hips, waist, and chest roughly the same width. Tips: Define waist, wrap dresses, belted coats.

Use maximum of 90 words!");

        var result = await (await Http.PostAsJsonAsync<PromptDTO>("api/openai/advanced", output)).Content.ReadAsStringAsync();
        return result;
    }

    private async Task<string> GetShortDescription()
    {
        PromptDTO output = new PromptDTO($"{BodyEstimate}, From this in a single word what is the body type?");

        var result = await (await Http.PostAsJsonAsync<PromptDTO>("api/openai/advanced", output)).Content.ReadAsStringAsync();
        return result;
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            await LocalStorage.SetItemAsync("ShoulderW", ShoulderW);
            await LocalStorage.SetItemAsync("BustW", BustW);
            await LocalStorage.SetItemAsync("WaistW", WaistW);
            await LocalStorage.SetItemAsync("HighHipW", HighHipW);
            await LocalStorage.SetItemAsync("HipW", HipW);


            BodyEstimate = await MakePrompt();
            await LocalStorage.SetItemAsync("BodyEstimate", BodyEstimate);

            ShortBodyEstimate = await GetShortDescription();
            await LocalStorage.SetItemAsync("ShortBodyEstimate", ShortBodyEstimate);
        }catch(Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Saved and Generated", Duration = 4000 });
    }

    private async Task LoadDataAsync()
    {
        try
        {
            ShoulderW = await LocalStorage.GetItemAsync<int>("ShoulderW");
            BustW = await LocalStorage.GetItemAsync<int>("BustW");
            WaistW = await LocalStorage.GetItemAsync<int>("WaistW");
            HighHipW = await LocalStorage.GetItemAsync<int>("HighHipW");
            HipW = await LocalStorage.GetItemAsync<int>("HipW");
            
            BodyEstimate = await LocalStorage.GetItemAsync<string>("BodyEstimate") ?? "Not yet estimated";
            ShortBodyEstimate = await LocalStorage.GetItemAsync<string>("ShortBodyEstimate") ?? "Estimate";
        }catch(Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }
    }

}
