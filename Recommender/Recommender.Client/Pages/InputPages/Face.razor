@page "/face"
@using Recommender.Client.DTOs
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject NotificationService NotificationService
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<RadzenText TextStyle="TextStyle.H3">Face</RadzenText>
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="6">
        <RadzenStack>

            <RadzenFormField Text="Forehead Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@ForeheadW" />
            </RadzenFormField>

            <RadzenFormField Text="Cheekbone Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@CheekboneW" />
            </RadzenFormField>

            <RadzenFormField Text="Jaw Width" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@JawW" />
            </RadzenFormField>

            <RadzenFormField Text="Face Length" Variant="Variant.Flat">
                <RadzenNumeric @bind-Value="@FaceH" />
            </RadzenFormField>

            <RadzenFormField Text="Chin Shape" Variant="Variant.Flat">
                <RadzenDropDown Data=@ChinShapes @bind-Value="@ChinT" />
            </RadzenFormField>
            <RadzenButton Click=@(args => SaveChangesAsync()) Text="Save and Estimate" ButtonStyle="ButtonStyle.Primary" />
        
            </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeSM="6">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H3">@ShortFaceEstimate</RadzenText>
            <RadzenText TextStyle="TextStyle.H4">Description:</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">@FaceEstimate</RadzenText>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>
<RadzenComponents />

@code {
    int ForeheadW = 0;
    int CheekboneW = 0;
    int JawW = 0;
    int FaceH = 0;
    string ChinT = "";
    string[] ChinShapes = [ "Soft", "Medium", "Sharp"];



    string FaceEstimate = "Not yet estimated";
    string ShortFaceEstimate = "Estimate";

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task<string> MakePrompt()
    {    
        PromptDTO output = new PromptDTO($@"
Given the following facial measurements:
- Forehead Width: {ForeheadW} cm
- Cheekbone Width: {CheekboneW} cm
- Jaw Width: {JawW} cm
- Face Length: {FaceH} cm
- Chin Shape with vales Soft, Medium, Sharp: {ChinT}

Determine the face type and provide relevant style tips. The types are:
1. Round Face: Characterized by soft, circular features with a width and height that are roughly equal. Full cheeks and a rounded chin with no sharp angles. Tips: hairstyles that add height and slim the face, angular glasses.
2. Oval Face: Balanced proportions with the forehead slightly wider than the chin. The length of the face is about one and a half times the width. Tips: Most hairstyles, including layers, bangs, or pulled-back styles.
3. Heart Face: Wider at the forehead, narrowing down towards a pointed chin. High cheekbones and a delicate jawline. Tips: Hairstyles wider at the jawline, rounded glasses.
4. Square Face: Strong, angular jawline; forehead, cheekbones, and jawline of approximately the same width. Tips: Hairstyles that soften the angles, curls or waves, rounded or oval glasses.
5. Triangle Face: Jawline wider than the cheekbones, narrow forehead. Tips: Adding volume at the top of the head, high arched eyebrows.
6. Diamond Face: High cheekbones, narrow forehead and jawline of approximately the same width. Tips: Hairstyles that add width at the chin, soft bangs.

Use maximum of 90 words!"
);

        var result = await (await Http.PostAsJsonAsync<PromptDTO>("api/openai/advanced", output)).Content.ReadAsStringAsync();
        return result;
    }

    private async Task<string> GetShortDescription()
    {
        PromptDTO output = new PromptDTO($"{FaceEstimate}, From this in a single word what is the face type?");

        var result = await (await Http.PostAsJsonAsync<PromptDTO>("api/openai/advanced", output)).Content.ReadAsStringAsync();
        return result;
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            await LocalStorage.SetItemAsync("ForeheadW", ForeheadW);
            await LocalStorage.SetItemAsync("CheekboneW", CheekboneW);
            await LocalStorage.SetItemAsync("JawW", JawW);
            await LocalStorage.SetItemAsync("FaceH", FaceH);
            await LocalStorage.SetItemAsync("ChinT", ChinT);

            FaceEstimate = await MakePrompt();
            await LocalStorage.SetItemAsync("FaceEstimate", FaceEstimate);

            ShortFaceEstimate = await GetShortDescription();
            await LocalStorage.SetItemAsync("ShortFaceEstimate", ShortFaceEstimate);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Saved and Generated", Duration = 4000 });
    }

    private async Task LoadDataAsync()
    {
        try
        {
            ForeheadW = await LocalStorage.GetItemAsync<int>("ForeheadW");
            CheekboneW = await LocalStorage.GetItemAsync<int>("CheekboneW");
            JawW = await LocalStorage.GetItemAsync<int>("JawW");
            FaceH = await LocalStorage.GetItemAsync<int>("FaceH");
            ChinT = await LocalStorage.GetItemAsync<string>("ChinT") ?? "";

            FaceEstimate = await LocalStorage.GetItemAsync<string>("FaceEstimate") ?? "Not yet estimated";
            ShortFaceEstimate = await LocalStorage.GetItemAsync<string>("ShortFaceEstimate") ?? "Estimate";
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }
    }

}
